# -*- coding: utf-8 -*-
"""Assignment Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16H73X2jgiN8wRbR_kQ0ZCo3unU8sPabi

# Assignment: Gooey.AI

### Author : Harjinder Singh

### Importing dataset

I am using pandas to load the json dataset from url.
"""

import pandas as pd

json_dataset_url = "https://storage.googleapis.com/dara-c1b52.appspot.com/daras_ai/media/c2809a08-141b-11ee-b6c2-8e93953183bb/gooey_inferences.json"
dataset = pd.read_json(json_dataset_url)

# sample data rows
dataset.head()

"""Checking basic information of dataset like column names, datatypes, value counts"""

dataset.info()

# shape of our dataset
dataset.shape

"""Since there are no null values present in the dataset we can move forward with our data.

### Task

Draw a retention chart, which shows the month-on-month retention of users, based on whether they ran an inference on a particular month or not.
"""

dataset['month'] = dataset.timestamp.dt.strftime('%Y-%m')
dataset.head(3)

# take only the required data, for calculating user retenstion rate
data = dataset[['user_id','month']]
data.head()

set(data.month.to_list())

# Group the users based on month and calculate unique users visited on that monoth

grouped_data = data.groupby('month').agg(unique_users=('user_id','nunique'))
grouped_data = grouped_data.reset_index()
grouped_data.head(12)

"""Retention of users will be calculated based on percentage of users for each month as compared to previous month"""

grouped_data['last_month_users'] = grouped_data['unique_users'].shift(1).fillna(0)
grouped_data.head(12)

def calculate_retention(row):
    if row['last_month_users'] > 0:
        return (row['unique_users'] / row['last_month_users']) * 100
    return 0

grouped_data['retention_rate'] = grouped_data.apply(calculate_retention, axis=1)
grouped_data.head(12)

"""### Ploting retention percentage with line char"""

import seaborn as sns
import matplotlib.pyplot as plt

# Create figure and axes
fig, ax1 = plt.subplots()

# Plot line plot
sns.lineplot(x='month', y='retention_rate', data=grouped_data, marker='o', ax=ax1)

# Set x-axis label rotation to 45 degrees
ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha='right')

# Add legends
ax1.legend(labels=['Retention Rate'])

# Add secondary y-axis for the histogram
ax2 = ax1.twinx()

# Plot histogram with transparency
sns.barplot(data=grouped_data, x='month', y='retention_rate', ax=ax2,  alpha=0.5)

# Set secondary y-axis label
ax2.set_ylabel('Frequency')

# Display the values at the bottom of each histogram bar
for i, val in enumerate(grouped_data['retention_rate']):
    ax2.text(i, 0, f'{val:.1f}%', ha='center', va='bottom')

# Set plot title and labels
plt.title('Month-by-Month Retention Rate')
ax1.set_xlabel('Month')
ax1.set_ylabel('Retention Rate')

# Adjust plot layout
plt.tight_layout()

# Display the plot
plt.savefig('month_by_month_retention_rate.png')
plt.show()

"""Above is the plotting for user retension.

### How we calculated retentions.

- Took unique user visits for each month say **X**
- For each month, number of user visited previous month say **Y**
- Retention rate = `(X/Y)*100`
"""

import seaborn as sns
import matplotlib.pyplot as plt

# Create figure and axes
fig, ax1 = plt.subplots()

# Plot line plot
sns.lineplot(x='month', y='retention_rate', data=grouped_data, marker='o', ax=ax1)

# Set x-axis label rotation to 45 degrees
ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha='right')

# Add legends
ax1.legend(labels=['Retention Rate'])

# Add secondary y-axis for the histogram
ax2 = ax1.twinx()

# Plot histogram with transparency
sns.barplot(data=grouped_data, x='month', y='unique_users', ax=ax2,  alpha=0.5)

# Set secondary y-axis label
ax2.set_ylabel('Frequency')

# Display the values at the bottom of each histogram bar
for i, val in enumerate(grouped_data['retention_rate']):
    ax2.text(i, 0, f'{val:.1f}%', ha='center', va='bottom')

# Set plot title and labels
plt.title('Month-by-Month Retention Rate + Unique users per month')
ax1.set_xlabel('Month')
ax1.set_ylabel('Retention Rate')

# Adjust plot layout
plt.tight_layout()

# Display the plot
plt.savefig('month_by_month_retention_rate_and_users.png')
plt.show()

